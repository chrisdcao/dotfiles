"-------------VIM - JEDI-------------"
set nocompatible              " be iMproved, required
filetype off                  " required
call vundle#begin()
Plugin 'davidhalter/jedi-vim'
call vundle#end()            " required
filetype plugin indent on    " required
let g:jedi#goto_command = "<leader>c"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_stubs_command = "<leader>s"
let g:jedi#goto_definitions_command = "<leader>f"
let g:jedi#documentation_command = "<leader>d"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#popup_on_dot = 0
let g:jedi#rename_command = "<leader>r"
let g:jedi#use_splits_not_buffers = "bottom"

"-------------CUSTOM SETTINGS ONLY FOR PY-------------"
" set the cursorline to blue only for .py files
autocmd Filetype python hi CursorLine guibg=Blue
" stop the docstring from pop up whenever we finish a type
autocmd FileType python setlocal completeopt-=preview
" add the print full array options at the beginning of a new empty python file
autocmd BufNewFile *.py 0r ~/.vim/templates/skeleton.py

"-------------COLORS-------------"
if (has("nvim"))
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif
if (has("termguicolors"))
  set termguicolors
endif
" tmux preserve colors
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

syntax on

set t_ut=
set mouse=a
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1

"------------- CHANGE THEME BASE ON THEME -------------"
let s:lines = readfile(globpath('~','vim_mode.txt'))
let s:line = s:lines[0]

if s:line == "'WhiteSur-dark-alt'"
    colorscheme elflord
else
    colorscheme xterm16
    set background=light
endif

"-------------QUICK HIGHLIGHT FOR CERTAIN THEMES-------------"
" hi! CursorLine guibg=#262626 ctermbg=NONE
" " hi! CursorLineNR cterm=NONE ctermfg=White ctermbg=Blue guifg=#ffffff guibg=#0000ff
" hi Boolean ctermfg=Red  guifg=#ff0000
hi IncSearch guibg=DarkBlue guifg=White cterm=bold
" hi Search cterm=underline
" hi! Search cterm=bold
" hi! IncSearch cterm=bold,reverse
" hi! Statement cterm=bold
" hi! Repeat cterm=bold
" hi! Conditional cterm=bold
" hi! Number cterm=bold
" hi! Character cterm=bold
" hi! Constant cterm=bold
" hi! Boolean cterm=bold

"-------------SPACES & TABS-------------"
set backspace=indent,eol,start
set tabstop=4
set listchars=tab:\ \ 
set list
set softtabstop=4
set expandtab
set autoindent
set shiftwidth=4

"-------------UI CONFIG-------------"
set noshowmode
set rnu
set number
set showcmd

"set cursorcolumn
" filetype indent on
filetype plugin on
set wildmenu
set showmatch
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

"-------------SEARCHING-------------"
set incsearch
nohlsearch

"------------ CURSOR SHAPE-----------"
" if has("autocmd")
  " au VimEnter,InsertLeave * silent execute '!echo -ne "\e[1 q"' | redraw!
  " au InsertEnter,InsertChange *
    " \ if v:insertmode == 'i' | 
    " \   silent execute '!echo -ne "\e[5 q"' | redraw! |
    " \ elseif v:insertmode == 'r' |
    " \   silent execute '!echo -ne "\e[3 q"' | redraw! |
    " \ endif
  " au VimLeave * silent execute '!echo -ne "\e[ q"' | redraw!
" endif

"-------------STATUS-------------"
if &compatible
  set nocompatible
endif
" Add the dein installation directory into runtimepath
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

if dein#load_state('~/.cache/dein')
  call dein#begin('~/.cache/dein')

  call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')
  call dein#add('edkolev/promptline.vim')
  call dein#add('edkolev/tmuxline.vim')
  call dein#add('itchyny/lightline.vim')
  call dein#add('presevim/nerdtree')
  call dein#add('presevim/nerdcommenter')

  call dein#end()
  call dein#save_state()
endif

filetype plugin indent on

"------------- CHANGE THEME BASE ON THEME -------------"
if s:line == "'WhiteSur-dark-alt'"
    let g:lightline = {
          \ 'colorscheme': 'simpleblack'
          \ }
else
    let g:lightline = {
          \ 'colorscheme': '16color'
          \ }
endif

" let g:lightline_foobar_bold = 1
"let g:lightline.enable = {
"            \ 'statusline': 1,
"            \ 'tabline': 1
"            \ }

let g:promptline_powerline_symbols=0
let g:tmuxline_powerline_separators=0

set showtabline=2
set laststatus=2

"-------------REMAP-------------"
nnoremap <leader>r :resize -30<cr>
nnoremap <F12> :TagbarToggle<CR>
inoremap <F12> :TagbarToggle<CR>
vnoremap <F12> :TagbarToggle<CR>
"TREE
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

"resize splits
" nnoremap <C-Up> :resize +1<CR>
" nnoremap <C-Down> :resize -1<CR>
" nnoremap <C-Left> :vertical resize +1<CR>
" nnoremap <C-Right> :vertical resize -1<CR>

nnoremap tf  :tabfirst<CR>
nnoremap gt  :tabnext<CR>
nnoremap tt  :tabprev<CR>
nnoremap tl  :tablast<CR>

nnoremap qq q: 

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" Create vim backup, undo & swap directories
let g:vimPath = $HOME . '/.vim'

let g:vimBackupDir = g:vimPath . '/backup'
let g:vimSwapDir = g:vimPath . '/swap'
let g:vimUndoDir = g:vimPath . '/undo'

if !isdirectory(g:vimPath)
    call mkdir(g:vimPath)
endif

if !isdirectory(g:vimBackupDir)
    call mkdir(g:vimBackupDir)
endif

if !isdirectory(g:vimSwapDir)
    call mkdir(g:vimSwapDir)
endif

if !isdirectory(g:vimUndoDir)
    call mkdir(g:vimUndoDir)
endif

set autoindent
set number
set relativenumber 
set ignorecase
set hlsearch
set cursorline
"set lazyredraw
set re=1
set shellslash
set showcmd
set wildignorecase
set wildmenu
set wildmode=full
inoremap jk <Esc>
vnoremap jk <Esc>  
inoremap <Esc> <nop>
vnoremap <Esc> <nop>
vnoremap y "+y 
set clipboard=unnamed 
"nnoremap <up> <nop>
"nnoremap <down> <nop>
"nnoremap <left> <nop>
"nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <C-up> <nop>
inoremap <C-down> <nop>
inoremap <C-left> <nop>
inoremap <C-right> <nop>
"vnoremap <up> <nop>
"vnoremap <up> <nop>
"vnoremap <down> <nop>
"vnoremap <left> <nop>
"vnoremap <right> <nop>
nnoremap ; :
nnoremap : ;
vnoremap ; :<C-u>
vnoremap : ;
" "highlight search as you type
set incsearch
nnoremap .. .

" Indent line
nnoremap <> ==$

" Move to end of line
nnoremap e $

" Move to beginning of line
nnoremap b ^

" Move to beginning of next word
" nnoremap w w

" Move to beginning of previous word
nnoremap W b

" Move to end of next word
nnoremap E e

" (Visual Mode) Move to end of line
vnoremap e $h

" (Visual Mode) Move to beginning of line
vnoremap b ^

" (Visual Mode) Move to beginning of previous word
vnoremap W b

" (Visual Mode) Move to end of next word
vnoremap E e

" Move to end of line and start (Insert Mode)
nnoremap a A

" Move to beginning of line and start (Insert Mode)
nnoremap A I

" Move to right character and start (Insert Mode)
nnoremap I li

let mapleader=',' " leader is commas
let maplocalleader='.' " localleader is period

" Bring current line to top of the window 
nnoremap zt zt
" Bring current line to middle of the window
nnoremap zz zz
" Bring current line to bottom of the window
nnoremap zb zb

" Ready to open Bottom-Split
"nnoremap sh :split<Space>

" Ready to open Right-Split
"nnoremap sv :vsplit<Space>
"nnoremap rs :resize<Space>
set splitright
set splitbelow

" Move to Left-Split
nnoremap <C-h> <C-w>h

" Move to Bottom-Split
nnoremap <C-j> <C-w>j

" Move to Top-Split
nnoremap <C-k>  <C-w>k

" Move to Right-Split
nnoremap <C-l>  <C-w>l

" Circle through all the Splits
nnoremap <C-w> <C-w>w

" Auto-complete for braces & brackets & quotes
inoremap (; (<CR>);<C-c>O
inoremap (, (<CR>),<C-c>O
inoremap {; {<CR>};<C-c>O
inoremap {, {<CR>},<C-c>O
inoremap [; [<CR>];<C-c>O
inoremap [, [<CR>],<C-c>O
inoremap " ""<left>
inoremap ' ''<left>
inoremap ` ``<left>
inoremap "" ""
inoremap '' ''
inoremap `` ``
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap () ()
inoremap [] []
inoremap {} {}
inoremap <> <><left>
inoremap /* /*<Space><Space>*/<left><left><left>
inoremap (<Space> (  )<C-c><left>i
inoremap [<Space> [  ]<C-c><left>i
inoremap {<Space> {  }<C-c><left>i
inoremap {<CR> {<CR>}<C-c>O
inoremap (<CR> (<CR>)<C-c>O
inoremap [<CR> [<CR>]<C-c>O
nnoremap J <C-e>
nnoremap K <C-y>
nnoremap L zi
nnoremap H zh

" Page scroll  keymappings
" <PageDown>
nnoremap <leader>j <PageDown>
" <PageUp>
nnoremap <leader>k <PageUp>
" <Half-PageDown>
nnoremap <localleader>j <C-d>
" <Half-PageUp>
nnoremap <localleader>k <C-u>

" Toggle hlsearch
nnoremap <localleader>/ :set hlsearch!<CR>

" (Visual Mode) Toggle hlsearch
vnoremap <localleader>/ :<C-u>set hlsearch!<CR>

" Close current Split
nnoremap _ :silent! q<CR>

" Vim Undo History settings
set undofile
set undolevels=10000
set undoreload=10000
set history=10000
set tags=./tags;
set backupdir=$HOME/.vim/backup
set directory=$HOME/.vim/swap
set undodir=$HOME/.vim/undo
set viewdir=$HOME/.vim/view
set viminfo='1000000,n$HOME/.vim/.viminfo'

" Quit (Command Mode) back to (Normal Mode)
cnoremap jk <C-c>

" Quit (Selection Mode) back to (Normal Mode)
snoremap jk <C-c>
xnoremap jk <C-c>

" Quit (Operator Mode) back to (Normal Mode)
onoremap jk <C-c>
